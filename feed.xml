<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nate McMaster</title>
    <description>Infrequent blog posts about software development, lifehacks, opinion, etc.
</description>
    <link>http://www.natemcmaster.com/</link>
    <atom:link href="http://www.natemcmaster.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 11 Mar 2015 23:45:00 -0600</pubDate>
    <lastBuildDate>Wed, 11 Mar 2015 23:45:00 -0600</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>My Favorite Sublime Text 3 Plugins</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 3&lt;/a&gt; is my favorite text editor and has been for years. One of the best features is its extensibility. There are thousands of packages available. To install them, checkout &lt;a href=&quot;https://packagecontrol.io&quot;&gt;packagecontrol.io&lt;/a&gt;. Here are my favorite Sublime Text 3 plugins.&lt;/p&gt;

&lt;h2 id=&quot;jsformathttpspackagecontroliopackagesjsformat&quot;&gt;1. &lt;a href=&quot;https://packagecontrol.io/packages/JsFormat&quot;&gt;JsFormat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you write JavaScript as much as I do, it’s handy to quickly and easily format your code. This plugin adds a new shortcut, Ctrl+Alt+F to format your code.&lt;/p&gt;

&lt;h2 id=&quot;theme---el-capitanhttpspackagecontroliopackagestheme20-20el20capitan&quot;&gt;2. &lt;a href=&quot;https://packagecontrol.io/packages/Theme%20-%20El%20Capitan&quot;&gt;Theme - El Capitan&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This theme makes ST3 feel at home in Os X Yosemite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://packagecontrol.io/readmes/img/501ed397b43071998ece2f048086d9d32863673d.png&quot; alt=&quot;El Capitan Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;package-controlhttppackagecontrolio&quot;&gt;3. &lt;a href=&quot;http://packagecontrol.io&quot;&gt;Package Control&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Install packages from the Command Palette.&lt;/p&gt;

&lt;h2 id=&quot;taghttpspackagecontroliopackagestag&quot;&gt;4. &lt;a href=&quot;https://packagecontrol.io/packages/Tag&quot;&gt;Tag&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Helps quick (and correctly) format your HTML and XML documents.&lt;/p&gt;

&lt;h2 id=&quot;select-quotedhttpspackagecontroliopackagesselect20quoted&quot;&gt;5. &lt;a href=&quot;https://packagecontrol.io/packages/Select%20Quoted&quot;&gt;Select Quoted&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This little nugget of a package adds on simple, but frequently useful keyboard shortcut: Cmd+’ for “Expand Selection To Quoted”&lt;/p&gt;

&lt;h2 id=&quot;sublime-code-intelhttpspackagecontroliopackagessublimecodeintel&quot;&gt;6. &lt;a href=&quot;https://packagecontrol.io/packages/SublimeCodeIntel&quot;&gt;Sublime Code Intel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It doesn’t always work well, but when it does, it is one of the better auto-complete engines for Python and NodeJS.&lt;/p&gt;

&lt;h2 id=&quot;sidebar-enhancementshttpspackagecontroliopackagessidebarenhancements&quot;&gt;7. &lt;a href=&quot;https://packagecontrol.io/packages/SideBarEnhancements&quot;&gt;Sidebar Enhancements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No Sublime Text installation is complete without these enhancements. Frankly, these should come default in Sublime. Fortunately, @titeando was nice enought to build it for us.&lt;/p&gt;

&lt;h2 id=&quot;sassbeautifyhttpspackagecontroliopackagessassbeautify&quot;&gt;8. &lt;a href=&quot;https://packagecontrol.io/packages/SassBeautify&quot;&gt;SassBeautify&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And finally, SassBeautify. If this package only formatted SASS it wouldn’t be in the my list. But this adds a crucial feature. SassBeautify can convert easily between CSS, SCSS, and SASS from the Command Palette. This has come in especially handy when taking someone elses clunky CSS and attempting to slim it down to SASS.&lt;/p&gt;

&lt;p&gt;Of course, there are many more packages available, including my favorite color schemes and some useful language-highlighting packages. But these above are the packages I could not code as effectively without. ■&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Mar 2015 12:30:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2015/03/05/st3-plugins/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2015/03/05/st3-plugins/</guid>
        
        
      </item>
    
      <item>
        <title>Blogging with Jekyll and GitHub Pages</title>
        <description>&lt;p&gt;I host this blog for free. I don’t worry about hosting plans, bandwidth, or others common website concerns. How? To get this setup, you will need to be a little proficient with these tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git&lt;/li&gt;
  &lt;li&gt;The command line&lt;/li&gt;
  &lt;li&gt;Markdown or HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;free-hosting-thanks-to-pagesgithubcomhttppagesgithubcom&quot;&gt;Free Hosting (thanks to &lt;a href=&quot;http://pages.github.com&quot;&gt;pages.github.com&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;GitHub provides a way for developers to post free webpages. This requires a little bit of hacking, but it is not too difficult. Their instructions are so simple, that rather than duplicate them here, I will just point you to their website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Setup free hosting with GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;generating-pages-with-jekyll&quot;&gt;Generating Pages with Jekyll&lt;/h2&gt;
&lt;p&gt;GitHub pages requires that you serve static content only. For those update their blogs infrequently and don’t need a complicated web service, static content works just fine. This blog is generated using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, which is a light framework written in Ruby for generating content.&lt;/p&gt;

&lt;p&gt;Jekyll is setup to generated blogs&lt;/p&gt;

&lt;h2 id=&quot;customizing-jekyll&quot;&gt;Customizing Jekyll&lt;/h2&gt;
&lt;p&gt;By default, GitHub will run Jekyll when you push your content and generate the HTML for you. Jekyll supports &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#available-plugins&quot;&gt;some powerful plugins&lt;/a&gt;, but to run these you must commit the generated content to your GitHub branch instead of the Jekyll code.&lt;/p&gt;

&lt;h2 id=&quot;my-setup&quot;&gt;My setup&lt;/h2&gt;
&lt;p&gt;For this blog, I have setup a separate folder within my project where Jekyll builds the content. This folder is configured as a git submodule for the same repo as the parent project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[submodule &amp;quot;build&amp;quot;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    url = git@github.com:natemcmaster/natemcmaster.github.io.git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    branch = master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I added a simple &lt;strong&gt;Makefile&lt;/strong&gt; to simplify the build and publishing process.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./build

&lt;span class=&quot;nf&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j_build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;j_build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    jekyll build

&lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    @open http://localhost:4000
    jekyll serve --watch

&lt;span class=&quot;nf&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j_build&lt;/span&gt;
    git --git-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/.git add --all
    git --git-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/.git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build `date`&amp;quot;&lt;/span&gt;
    git --git-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/.git push
    git add build/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Happy blogging! ■&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Mar 2015 09:00:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2015/03/01/blogging-with-jekyll/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2015/03/01/blogging-with-jekyll/</guid>
        
        
      </item>
    
      <item>
        <title>The Empire Reboots</title>
        <description>&lt;p&gt;Although I have only worked for Microsoft as an intern, there was a noticeable difference between the first summer (Ballmer Dynasty) and the second (Nadella Era). Part of that difference was a more innovative atmosphere among leaders and fellow devs. Can Satya turn around the decline of Microsoft? I have no crystal ball, but his leadership is a step in the right direction.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Satya Nadella) looks the part of a modern technology C.E.O., certainly more than Gates does now or than Ballmer ever did. In Apple’s famous 2006 commercial, in which the staid, uninteresting guy is the P.C. and the hip, cool one is the Mac, Nadella would play the Mac. He is fit, with closely cropped hair. He wears black-rimmed glasses and has even been seen in a hoodie. In his short tenure, he has already used a metaphor with overtones of Zen to explain to the troops what he wants (“a team of rowers working together at the highest level”). One of the reasons the board chose him, according to someone familiar with the process, was that he was an “insider who had the best of what an outsider could bring.” He actually talks to people outside the company, from competitors to venture capitalists. This is unusual in a company that people describe as insular. “You talk about the rise and fall of empires or families or anything; being insular is the best way to sort of kill yourself,” says Nadella.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vanityfair.com/business/2014/11/satya-nadella-bill-gates-steve-ballmer-microsoft&quot;&gt;The Empire Reboots&lt;/a&gt; from Vanity Fair. ■&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Oct 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/10/08/vanity-fair-microsoft-reboot/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/10/08/vanity-fair-microsoft-reboot/</guid>
        
        
      </item>
    
      <item>
        <title>Github Student Pack</title>
        <description>&lt;p&gt;I just received access to the GitHub Student Developer Pack. Obviously, I am very pleased to receive special access to discounted and free services.
With all of these discounts, I will save about &lt;em&gt;$2,700&lt;/em&gt; in monthly subscription fees and receive almost &lt;em&gt;$1,200&lt;/em&gt; in platform credits.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s no substitute for hands-on experience, but for most students, real world tools can be cost prohibitive. That’s why we created the GitHub Student Developer Pack with some of our partners and friends: to give students free access to the best developer tools in one place so they can learn by doing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://education.github.com/pack&quot;&gt;GitHub Student Developer Pack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a list of some of the free services included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Atom&lt;/li&gt;
  &lt;li&gt;Bitnami&lt;/li&gt;
  &lt;li&gt;Crowdflower&lt;/li&gt;
  &lt;li&gt;DigitalOcean&lt;/li&gt;
  &lt;li&gt;DNSimple&lt;/li&gt;
  &lt;li&gt;GitHub&lt;/li&gt;
  &lt;li&gt;HackHands&lt;/li&gt;
  &lt;li&gt;Namecheap&lt;/li&gt;
  &lt;li&gt;Orchestrate&lt;/li&gt;
  &lt;li&gt;Screenhero&lt;/li&gt;
  &lt;li&gt;SendGrid&lt;/li&gt;
  &lt;li&gt;Stripe&lt;/li&gt;
  &lt;li&gt;Travis CI&lt;/li&gt;
  &lt;li&gt;Unreal Engine&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 07 Oct 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/10/07/github-student-pack/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/10/07/github-student-pack/</guid>
        
        
      </item>
    
      <item>
        <title>Plex TV Announced For Xbox One</title>
        <description>&lt;p&gt;Plex TV announced the release of their Xbox 360 and One client today.
For Xbox One, this is the first app that provides a simple way to stream
media via Xbox from a personal media server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(The Xbox apps will) be available for free for Plex Pass members on Tuesday Oct 7th for the Xbox One, and shortly after that for the Xbox 360. (Don’t have a console? We thought of everything: we’ll be giving an Xbox One away on our social media channels, so stay tuned.) If you don’t have a Plex Pass, you’ll be able to purchase the apps with a one-time fee after the Plex Pass preview period. Also, we focused on video for this initial release; rest easy knowing we’re working hard on adding photo and music support, but we didn’t want to wait to get it into your hands!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.plex.tv/2014/10/05/plex-xbox-one-xbox-360/&quot;&gt;Original Article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, this app will not be free. I am still looking forward to the expected release of a media player for Xbox One that comes with DLNA support.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Oct 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/10/06/plex-for-xbox/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/10/06/plex-for-xbox/</guid>
        
        
      </item>
    
      <item>
        <title>A Day at YouTube: Onsite Interviews</title>
        <description>&lt;p&gt;At Google, onsite interviews vet a candidate’s dev skills and do not focus positions with specific teams or projects. I went hoping to learn who I might work with, what I might work on, and how I can expect to spend my time as a YouTube engineer. I left with no answers to such, a coding headache, and a lingering question, “how &lt;em&gt;do&lt;/em&gt; you rotate subtrees in a BST?”&lt;/p&gt;

&lt;p&gt;I almost wrote a scathing review of how the interviews left me feeling unimpressed and confused, but my recruiter called an hour after and clarified the process: team and project selection comes after a job offer is extended. I wish I had known earlier so I could have curbed my expectations.&lt;/p&gt;

&lt;p&gt;Google paid for my flight and hotel. (Thanks!) I arrived a day in advance, spent free time touring the Bay Area, and had a fretful night of pre-interview nightmares in which I repeatedly forget English, JavaScript, my clothing, or all three.&lt;/p&gt;

&lt;h2 id=&quot;the-coding-interviews&quot;&gt;The Coding Interviews&lt;/h2&gt;
&lt;p&gt;Within 15 minutes, I was “on trial.” A recruiter greeted me in the lobby of the San Bruno office. We talked pleasantries for a few minutes until my first examiner promptly arrived. My recruiter wished me luck and turned me over to the wolves.&lt;/p&gt;

&lt;p&gt;At YouTube, I interviewed with four engineers, each for 45 minutes. My interviewers cut to the chase, mostly skipping personal questions (with one exception) and dove head-first into programming questions.
They grilled me on subjects ranging from JavaScript’s “this” to data structure implementations. I had no time to stop and breathe between the interviews. Except for a 45 minute lunch interview, I stayed in a small conference room next to HR.&lt;/p&gt;

&lt;p&gt;The exception I mentioned above was my first inteview. We talked first about my previous experience and work at Microsoft. He seemed genuinely interested in my GitHub profile. The programming gauntlet was easy and only lasted 10 minutes. The rest of the time my interviewer tried to sell me on working for YouTube.&lt;/p&gt;

&lt;p&gt;But as I said before, this was the only exception. The other interviews were exhausting. Like oral exams in high school Spanish, I left convinced of my idiocy and expecting a flunking grade.&lt;/p&gt;

&lt;h2 id=&quot;onsite-impressions-of-google&quot;&gt;Onsite Impressions of Google&lt;/h2&gt;
&lt;p&gt;The empowering do-cool-things culture at Google is fresh air to the suffocating red tape of some big companies. I, like many engineers, feel most effect and creative when given minimal restrictions. &lt;/p&gt;

&lt;p&gt;That said, Google has flaws, too. I expected Googlers to exhibit enthusiasm for their work. Instead, most seemed to think their work is routine. A few implied that exciting work is done at start-ups, not Google. In addition, the interviews felt fairly canned and impersonal. I hoped to get a sense of who my coworkers may be. Instead, I rehearsed memorized algorithms from college textbooks.&lt;/p&gt;

&lt;h3 id=&quot;san-bruno-office&quot;&gt;San Bruno Office&lt;/h3&gt;
&lt;p&gt;The San Bruno office has spunk and lots of red. In the lobby, four TV’s were playing a loop of zanny music videos, dancing cats, and DIY instructionals. All chairs, umbrellas, candy jars, slides, and walls were solid red. The lunch is free for all employees, and I suppose they get what they pay for. I had cold rice and bland pesto chicken.&lt;/p&gt;

&lt;h3 id=&quot;googleplex&quot;&gt;Googleplex&lt;/h3&gt;
&lt;p&gt;I also had time to tour the Googleplex in Mountain View. Unlike San Bruno, they have &lt;em&gt;four&lt;/em&gt; colors in their schema: red, blue, green, and yellow. Employees ride bikes between buildings. There is one soccer field, and some open area behind the building. The glass walls reveal large open work areas where a mix of hypsters, nerds, and few nuts work on laptops.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Interviewer feedback is funneled into a hiring system. First, Hiring Committee says yes or no. If yes, then Compensation Committee says how much yes.Meanwhile, I will be back home, browsing dusty textbooks trying to find the answer to, “how &lt;em&gt;do&lt;/em&gt; you rotate subtrees in a BST?”&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Aug 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/08/31/youtube-interview/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/08/31/youtube-interview/</guid>
        
        
      </item>
    
      <item>
        <title>Writing an EF7 Provider</title>
        <description>&lt;p&gt;I spent my summer internship at Microsoft to building a piece of software that allows Entity Framework 7 to connect with Azure Table Storage accounts. 
In the process of creating this, I attempted to document the interface between the provider and the core APIs of EF. This post includes technical details that should enable third-parties to create their own provider for Entity Framework.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: this content is accurate as of the today (July 19), but these APIs are subject to change. This content is also available on the &lt;a href=&quot;https://github.com/aspnet/EntityFramework/wiki/Writing-an-EF7-Provider&quot;&gt;Entity Framework wiki.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;EF provides a set of Core APIs and services that make it easier to manage the
interaction of in-memory objects and persistent data storage.
This core is agnostic of all data store specific details,
and is used by all of EF supported providers (SQL Server, SQLite, and Azure Table Storage).
Using these Core APIs, it is possible to create a provider for additional data store types.&lt;/p&gt;

&lt;p&gt;An EF provider must implement a set of APIs to manage reading from and writing to
a persistent data store. See diagrams and reference below for some detail on how the classes interact
with the EF core.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;EF providers must implement the following &lt;a href=&quot;#abstractclasses&quot;&gt;abstract classes&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure.DbContextOptionsExtension&lt;/li&gt;
  &lt;li&gt;Storage.DataStore&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreConnection&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreCreator&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreSource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#optionaloverride&quot;&gt;Optional classes to override.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure.Database&lt;/li&gt;
  &lt;li&gt;Infrastructure.ValueGeneratorCache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;All reference names in this document are relative to Microsoft.Data.Entity&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&quot;recommended&quot;&gt;Recommended&lt;/h3&gt;
&lt;p&gt;To help end-users discover provider-specific features via IntelliSense, we &lt;a href=&quot;#extensionmethods&quot;&gt;recommend
providing extension methods&lt;/a&gt; on some of the default EF classes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DbContextOptions&lt;/li&gt;
  &lt;li&gt;EntityServicesBuilder&lt;/li&gt;
  &lt;li&gt;Storage.Database&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started-sample-project&quot;&gt;Getting Started: Sample Project&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/natemcmaster/entityframework-provider-starter&quot;&gt;this repository&lt;/a&gt;
to get a starter project for writing a new EF provider.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;h2 id=&quot;a-nameabstractclassesa-abstract-classes&quot;&gt;&lt;a name=&quot;abstractclasses&quot;&gt;&lt;/a&gt; Abstract Classes&lt;/h2&gt;

&lt;h3 id=&quot;infrastructuredbcontextoptionsextension&quot;&gt;Infrastructure.DbContextOptionsExtension&lt;/h3&gt;
&lt;p&gt;This class configures the dependency injection settings used in an instance of DbContext.
It is used during DbContext initialization to configure the DbContextOptions.&lt;/p&gt;

&lt;p&gt;Methods required:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/abu6gCh.png&quot; alt=&quot;DbContextOptionExtension&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;storagedatastore&quot;&gt;Storage.Datastore&lt;/h3&gt;
&lt;p&gt;This class is the hub of activity for a provider.
A data store must implement these methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaveChangesAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IReadOnlyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                              &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SaveChanges&lt;/strong&gt; receives a list of entities which must be persisted to the data store.
Upon successful completion, return the number of entities successfully saved.
If an entity cannot be saved, this method should throw an exception containing
the reason why the action failed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/chhMeSe.png&quot; alt=&quot;Save changes workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt; receives a &lt;a href=&quot;#relinq&quot;&gt;QueryModel&lt;/a&gt; containing a query to execute against the data store.
This method should return an IEnumerable from the data store of all entites matching
the query model. QueryModel is a simplified, but equivalent expression tree that represents
the original LINQ query requested by user code on DbSet. (Thanks &lt;a href=&quot;#relinq&quot;&gt;relinq&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FvUcYFZ.png&quot; alt=&quot;Query&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;storagedatastoreconnection&quot;&gt;Storage.DataStoreConnection&lt;/h3&gt;
&lt;p&gt;This class manages connection settings and sessions.&lt;/p&gt;

&lt;p&gt;Although an EF provider requires an implementation, the details of how the class
operates is &lt;em&gt;entirely up to the provider&lt;/em&gt; i.e. time to freestyle. &lt;img class=&quot;emoji&quot; title=&quot;:snowboarder:&quot; alt=&quot;:snowboarder:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f3c2.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; &lt;/p&gt;

&lt;p&gt;For example, SQL Server uses this class to open TCP/IP connections,
but SQLite uses this class to create connections to the local filesystem.&lt;/p&gt;

&lt;h3 id=&quot;storagedatastorecreator&quot;&gt;Storage.DataStoreCreator&lt;/h3&gt;
&lt;p&gt;An implementation of requires implementation of the following methods.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;EnsureCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureCreatedAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;EnsureDeleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureDeletedAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;EnsureCreated&lt;/strong&gt; ensures that the database/tables/containers needed to store
the model on the server exists and are write-accessible.
&lt;strong&gt;EnsureDeleted&lt;/strong&gt; ensures the database/tables/containers are deleted.&lt;/p&gt;

&lt;p&gt;Both methods &lt;em&gt;return true&lt;/em&gt; when the method call changed something on the server —
e.g. created a new database, deleted a table — and &lt;em&gt;return false&lt;/em&gt; when
the model has already been created/deleted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Taun659.png&quot; alt=&quot;datastorecreator&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-namedatastoresourceastoragedatastoresource&quot;&gt;&lt;a name=&quot;datastoresource&quot;&gt;&lt;/a&gt;Storage.DatastoreSource&lt;/h3&gt;
&lt;p&gt;This class configures Entity Framework to use provider-specific implementations
of theses classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage.DataStore&lt;/li&gt;
  &lt;li&gt;Infrastructure.DbContextOptionsExtension&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreCreator&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreConnection&lt;/li&gt;
  &lt;li&gt;Identity.ValueGeneratorCache &lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Storage.Database &lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; These classes are not abstract. A default implementation has been provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nMQM7Dl.png&quot; alt=&quot;Datastoresource&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because this is fairly straightforward class, we have provided an abstract implementation that makes it 
easier to use dependency injection.&lt;/p&gt;

&lt;h4 id=&quot;datastoresourcelttdatastore-tdbcontextoptionsextension-tcreator-tconnection-tvaluegeneratorcache-tdatabasegt&quot;&gt;DatastoreSource&amp;lt;TDataStore, TDbContextOptionsExtension, TCreator, TConnection, TValueGeneratorCache, TDatabase&amp;gt;&lt;/h4&gt;
&lt;p&gt;This generic class requests an implementation of the types classes from ServiceCollection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rNucpFG.png&quot; alt=&quot;Datastoresource generic&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-nameoptionaloverridea-optional-overrides&quot;&gt;&lt;a name=&quot;optionaloverride&quot;&gt;&lt;/a&gt; Optional Overrides&lt;/h2&gt;
&lt;p&gt;These classes do not &lt;em&gt;need&lt;/em&gt; to be implemented, but they are a way to extend provider features.&lt;/p&gt;

&lt;h3 id=&quot;infrastructuredatabase&quot;&gt;Infrastructure.Database&lt;/h3&gt;
&lt;p&gt;This class provides access to APIs custom to the database of the provider.
This class is best used as a proxy to DatastoreCreator which should contain the
logic for manipulating the structure of the data store.&lt;/p&gt;

&lt;p&gt;Example: SQLite uses this to provide APIs for creating/deleting a database file.
In Azure Table Storage, it provides APIs for creating/deleting tables on the server.&lt;/p&gt;

&lt;h3 id=&quot;infrastructurevaluegeneratorcache&quot;&gt;Infrastructure.ValueGeneratorCache&lt;/h3&gt;
&lt;p&gt;This class is used to control value generators.
Value generators are used by EF7 to populate fields, such as auto-incremented IDs, that are generated on the server or client.&lt;/p&gt;

&lt;h2 id=&quot;a-nameextensionmethodsarecommended-extension-methods&quot;&gt;&lt;a name=&quot;extensionmethods&quot;&gt;&lt;/a&gt;Recommended Extension Methods&lt;/h2&gt;
&lt;p&gt;These classes exist in EF’s Core, but users may not know how to directly interact
with them to configure their application.
By creating custom extension methods, IntelliSense in Visual Studio will show users
custom methods to configure the provider.
IntelliSense works best the extension methods are defined in the namespace of the class they extend.&lt;/p&gt;

&lt;h3 id=&quot;dbcontextoptions&quot;&gt;DbContextOptions&lt;/h3&gt;
&lt;p&gt;Expose access to your provider within the &lt;em&gt;OnConfiguring&lt;/em&gt; method of DbContext. 
Your extension method should add your provider-specific implementation of 
DbContextOptionsExtension to an instance of DbContextOptions.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoji&quot; title=&quot;:hammer:&quot; alt=&quot;:hammer:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f528.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; Power user note: To add a DbContextOptionsExtension to DbContextOptions,
you must first cast DbContextOptions to IDbContextOptionsExtensions, and then use
**IDbContextOptionsExtensions.AddOrUpdateExtension&lt;t&gt;()**.
We require this to keep IntelliSense clean for users, but still expose
APIs for EF provider developers.&lt;/t&gt;&lt;/p&gt;

&lt;p&gt;Example: This will help users configure a context that connects to Azure Table Storage.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Data.Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtsDbContextExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContextOptions&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseAzureTableStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContextOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDbContextOptionsExtensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddOrUpdateExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsOptionsExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;entityservicesbuilder&quot;&gt;EntityServicesBuilder&lt;/h3&gt;
&lt;p&gt;Expose access to dependency injection configuration. This extension should configure
DI to use provider-specific implementations.&lt;/p&gt;

&lt;p&gt;Example: Configure DI to use Azure Table Storage’s implementations&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Framework.DependencyInjection&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntityServicesBuilderExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddAzureTableStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceCollection&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataStoreSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtsDataStoreSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsQueryFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TableEntityAdapterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsValueReaderFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDataStoreCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsValueGeneratorCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;storagedatabase&quot;&gt;Storage.Database&lt;/h3&gt;
&lt;p&gt;Expose the provider-specific database calls with an extension method that
safely casts Storage.Database to the provider implementation.&lt;/p&gt;

&lt;p&gt;Example: This will light-up the APIs unique to SQL. A user will see this extension method
listed in IntelliSense when accessing DbContext.Database&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Data.Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RelationalDatabaseExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelationalDatabase&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AsRelational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelationalDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;RelationalDatabase not in use&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;third-party-libraries&quot;&gt;Third-Party Libraries&lt;/h1&gt;

&lt;h3 id=&quot;a-namerelinqarelinq&quot;&gt;&lt;a name=&quot;relinq&quot;&gt;&lt;/a&gt;Relinq&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://relinq.codeplex.com&quot;&gt;relinq&lt;/a&gt; is a third party library used by Entity Framework to simplify interaction
with LINQ queries. All LINQ queries against DbSet run through a set of expression
tree visitors that have been simplified by relinq. A provider may read and/or
change the expression tree it receives in &lt;strong&gt;Storage.Datastore.Query()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris.eldredge.io/blog/2012/03/29/Getting-Started-With-Relinq/&quot;&gt;Getting Started with Re-linq&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.re-motion.org/blogs/mix/category/re-linq&quot;&gt;Re-linq blog posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Jul 2014 17:30:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/07/19/writing-an-ef7-provider/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/07/19/writing-an-ef7-provider/</guid>
        
        
      </item>
    
      <item>
        <title>Graphs, Trees, and Leonardo da Vinci</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.natemcmaster.com/projects/historyexplorer/&quot;&gt;History Explorer&lt;/a&gt; allows users to explore the relationship between historical people, places, and ideas. The content itself is almost completely verbatim Wikipedia. The more important part is the graphical presentation. &lt;/p&gt;

&lt;p&gt;Ideas, people, and places share a connection. Karinthy theorized that everyone can be connected to everyone in a chain of six links or fewer, or six degrees of separation. Unique ideas, wars, political leaders, books, painting, and music share a similar connection. History explorer attempts to capture and present some of those connections (but only a very minor subset).&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Most college seniors barely survive their last and final history class. I got lucky. My history class allowed me to do something new and innovative. The professor chose to theme his class around &lt;em&gt;creativity&lt;/em&gt;. For the final project, worth a third of our grade, we had to present a “creative work that involves historical content.” This project is the fruit of those open-ended guidelines.&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;
&lt;p&gt;This static website relys almost entirely on client-side JavaScript. &lt;a href=&quot;https://github.com/natemcmaster/historyexplorer/tree/build&quot;&gt;The application&lt;/a&gt; relies on &lt;a href=&quot;https://angularjs.org&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://d3js.org&quot;&gt;D3.js&lt;/a&gt; to organize and present the content. The website is served from GitHub pages, and includes a rather large (900 kb) JSON file to provide the data for the graph. I crafted the JSON using some &lt;a href=&quot;https://github.com/natemcmaster/historyexplorer/tree/master/builder&quot;&gt;Python scripts&lt;/a&gt; and a list of historical terms from the course. The most rigorous part of the project involved matching connections between key terms and choosing images. This took almost as much time as the invention of a good heuristic for arranging the nodes in the graph.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jun 2014 12:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/06/02/history-explorer/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/06/02/history-explorer/</guid>
        
        
      </item>
    
      <item>
        <title>Don&#39;t Be A Pirate</title>
        <description>&lt;p&gt;The wild frontier of the Internet allows new forms of piracy. Hacking, pornography, &lt;a href=&quot;http://en.wikipedia.org/wiki/Silk_Road_(marketplace)&quot;&gt;black markets&lt;/a&gt;, and digital theft abound, and the Internet provides anonymity. Although you &lt;em&gt;can&lt;/em&gt; do these, you really not. Contrary to what Captain Barbossa implied, everyone should stick to the “Code.” The code of right and wrong, when ignored, leads only to more misery. I am not talking about any &lt;a href=&quot;http://www.acm.org/about/code-of-ethics&quot;&gt;specific&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Pirate_code&quot;&gt;code&lt;/a&gt;, but rather, the divine code inside all humans. Follow your internal moral compass. Seek the good, noble, inspiring, and honorable. If you feel a need to hide your actions, they are probably wrong. Don’t be a pirate: be good.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Dec 2013 16:21:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/12/dont-be-pirate.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/12/dont-be-pirate.html</guid>
        
        
        <category>opinion</category>
        
        <category>cs404</category>
        
      </item>
    
      <item>
        <title>A Rebuttal For Mark Bauerline</title>
        <description>&lt;p&gt;I have never read a book more infuriating than &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/The-Dumbest-Generation-Stupefies-Jeopardizes/dp/1585427128&quot;&gt;The Dumbest Generation&lt;/a&gt;&lt;/em&gt;. Its author, Mark Bauerline, predicts a grim future based on statistics about my generation. His facts may be accurate, but his interpretation is wrong. No, the sky is not falling. Here are a few reasons why. &lt;/p&gt;

&lt;p&gt;Change does not jeopardize the future. The technology of communication has changed many times. Neither the printing press, typewriter, nor telegram crashed civilization. Rather, they sped the Enlightenment, Reformation, and Scientific Revolution. Likewise, the Internet is an opportunity, not a curse. It lowers the cost of widespread publication. Expensive books limited publication of ideas to highly literate authors. Blogging and social media expand publishing power to all.  &lt;/p&gt;

&lt;p&gt;Civic activity is not the only variable in producing quality government. Cultural pressure, wealthy lobbyists, foreign affairs, and the health of the economy influence government, too. Today’s youth may not vote, campaign, or lobby as much as the youth of the 1950s, but this is not necessarily a decline: it is change. Decades ago, the public square was the place to share and spread ideas. Today, the public square is the Internet. The political tools of decades past must adapt to advance of digital communication. &lt;/p&gt;

&lt;p&gt;Finally, the intellectual future of the United States is brighter than ever. My so-called “dumbest” generation is exposed to an ever wider and diverse stream of ideas, but this does not dull or stupefy. Exposure sharpens our power to filter, discern, interpret, and analyze. My generation cannot be sheltered from learning about lifestyles, opinions, and cultures different from our parents’. We learn younger and better how to judge credibility, ignore noise, and make decisions. The intellectual future rests in our hands, and we come as hungry to know and think as any generation past.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Nov 2013 06:36:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/11/chicken-little.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/11/chicken-little.html</guid>
        
        
        <category>book post</category>
        
        <category>cs404</category>
        
      </item>
    
  </channel>
</rss>
