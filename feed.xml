<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nate McMaster</title>
    <description>Infrequent blog posts about software development, photography, opinion, etc.
</description>
    <link>http://www.natemcmaster.com/</link>
    <atom:link href="http://www.natemcmaster.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 06 Oct 2014 10:56:07 -0600</pubDate>
    <lastBuildDate>Mon, 06 Oct 2014 10:56:07 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Plex TV Announced For Xbox One</title>
        <description>&lt;p&gt;Plex TV announced the release of their Xbox 360 and One client today.
For Xbox One, this is the first app that provides a simple way to stream
media via Xbox from a personal media server.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(The Xbox apps will) be available for free for Plex Pass members on Tuesday Oct 7th for the Xbox One, and shortly after that for the Xbox 360. (Don’t have a console? We thought of everything: we’ll be giving an Xbox One away on our social media channels, so stay tuned.) If you don’t have a Plex Pass, you’ll be able to purchase the apps with a one-time fee after the Plex Pass preview period. Also, we focused on video for this initial release; rest easy knowing we’re working hard on adding photo and music support, but we didn’t want to wait to get it into your hands!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.plex.tv/2014/10/05/plex-xbox-one-xbox-360/&quot;&gt;Original Article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, this app will not be free. I am still looking forward the expected release of a media player for Xbox One that comes with DLNA support.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Oct 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/10/06/plex-for-xbox/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/10/06/plex-for-xbox/</guid>
        
        
      </item>
    
      <item>
        <title>A Day at YouTube: Onsite Interviews</title>
        <description>&lt;p&gt;At Google, onsite interviews vet a candidate’s dev skills and do not focus positions with specific teams or projects. I went hoping to learn who I might work with, what I might work on, and how I can expect to spend my time as a YouTube engineer. I left with no answers to such, a coding headache, and a lingering question, “how &lt;em&gt;do&lt;/em&gt; you rotate subtrees in a BST?”&lt;/p&gt;

&lt;p&gt;I almost wrote a scathing review of how the interviews left me feeling unimpressed and confused, but my recruiter called an hour after and clarified the process: team and project selection comes after a job offer is extended. I wish I had known earlier so I could have curbed my expectations.&lt;/p&gt;

&lt;p&gt;Google paid for my flight and hotel. (Thanks!) I arrived a day in advance, spent free time touring the Bay Area, and had a fretful night of pre-interview nightmares in which I repeatedly forget English, JavaScript, my clothing, or all three.&lt;/p&gt;

&lt;h2 id=&quot;the-coding-interviews&quot;&gt;The Coding Interviews&lt;/h2&gt;
&lt;p&gt;Within 15 minutes, I was “on trial.” A recruiter greeted me in the lobby of the San Bruno office. We talked pleasantries for a few minutes until my first examiner promptly arrived. My recruiter wished me luck and turned me over to the wolves.&lt;/p&gt;

&lt;p&gt;At YouTube, I interviewed with four engineers, each for 45 minutes. My interviewers cut to the chase, mostly skipping personal questions (with one exception) and dove head-first into programming questions.
They grilled me on subjects ranging from JavaScript’s “this” to data structure implementations. I had no time to stop and breathe between the interviews. Except for a 45 minute lunch interview, I stayed in a small conference room next to HR.&lt;/p&gt;

&lt;p&gt;The exception I mentioned above was my first inteview. We talked first about my previous experience and work at Microsoft. He seemed genuinely interested in my GitHub profile. The programming gauntlet was easy and only lasted 10 minutes. The rest of the time my interviewer tried to sell me on working for YouTube.&lt;/p&gt;

&lt;p&gt;But as I said before, this was the only exception. The other interviews were exhausting. Like oral exams in high school Spanish, I left convinced of my idiocy and expecting a flunking grade.&lt;/p&gt;

&lt;h2 id=&quot;onsite-impressions-of-google&quot;&gt;Onsite Impressions of Google&lt;/h2&gt;
&lt;p&gt;The empowering do-cool-things culture at Google is fresh air to the suffocating red tape of some big companies. I, like many engineers, feel most effect and creative when given minimal restrictions. &lt;/p&gt;

&lt;p&gt;That said, Google has flaws, too. I expected Googlers to exhibit enthusiasm for their work. Instead, most seemed to think their work is routine. A few implied that exciting work is done at start-ups, not Google. In addition, the interviews felt fairly canned and impersonal. I hoped to get a sense of who my coworkers may be. Instead, I rehearsed memorized algorithms from college textbooks.&lt;/p&gt;

&lt;h3 id=&quot;san-bruno-office&quot;&gt;San Bruno Office&lt;/h3&gt;
&lt;p&gt;The San Bruno office has spunk and lots of red. In the lobby, four TV’s were playing a loop of zanny music videos, dancing cats, and DIY instructionals. All chairs, umbrellas, candy jars, slides, and walls were solid red. The lunch is free for all employees, and I suppose they get what they pay for. I had cold rice and bland pesto chicken.&lt;/p&gt;

&lt;h3 id=&quot;googleplex&quot;&gt;Googleplex&lt;/h3&gt;
&lt;p&gt;I also had time to tour the Googleplex in Mountain View. Unlike San Bruno, they have &lt;em&gt;four&lt;/em&gt; colors in their schema: red, blue, green, and yellow. Employees ride bikes between buildings. There is one soccer field, and some open area behind the building. The glass walls reveal large open work areas where a mix of hypsters, nerds, and few nuts work on laptops.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Interviewer feedback is funneled into a hiring system. First, Hiring Committee says yes or no. If yes, then Compensation Committee says how much yes.Meanwhile, I will be back home, browsing dusty textbooks trying to find the answer to, “how &lt;em&gt;do&lt;/em&gt; you rotate subtrees in a BST?”&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Aug 2014 00:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/08/31/youtube-interview/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/08/31/youtube-interview/</guid>
        
        
      </item>
    
      <item>
        <title>Writing an EF7 Provider</title>
        <description>&lt;p&gt;I spent my summer internship at Microsoft to building a piece of software that allows Entity Framework 7 to connect with Azure Table Storage accounts. 
In the process of creating this, I attempted to document the interface between the provider and the core APIs of EF. This post includes technical details that should enable third-parties to create their own provider for Entity Framework.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: this content is accurate as of the today (July 19), but these APIs are subject to change. This content is also available on the &lt;a href=&quot;https://github.com/aspnet/EntityFramework/wiki/Writing-an-EF7-Provider&quot;&gt;Entity Framework wiki.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;EF provides a set of Core APIs and services that make it easier to manage the
interaction of in-memory objects and persistent data storage.
This core is agnostic of all data store specific details,
and is used by all of EF supported providers (SQL Server, SQLite, and Azure Table Storage).
Using these Core APIs, it is possible to create a provider for additional data store types.&lt;/p&gt;

&lt;p&gt;An EF provider must implement a set of APIs to manage reading from and writing to
a persistent data store. See diagrams and reference below for some detail on how the classes interact
with the EF core.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;EF providers must implement the following &lt;a href=&quot;#abstractclasses&quot;&gt;abstract classes&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure.DbContextOptionsExtension&lt;/li&gt;
  &lt;li&gt;Storage.DataStore&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreConnection&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreCreator&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreSource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#optionaloverride&quot;&gt;Optional classes to override.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure.Database&lt;/li&gt;
  &lt;li&gt;Infrastructure.ValueGeneratorCache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;All reference names in this document are relative to Microsoft.Data.Entity&lt;/em&gt;)&lt;/p&gt;

&lt;h3 id=&quot;recommended&quot;&gt;Recommended&lt;/h3&gt;
&lt;p&gt;To help end-users discover provider-specific features via IntelliSense, we &lt;a href=&quot;#extensionmethods&quot;&gt;recommend
providing extension methods&lt;/a&gt; on some of the default EF classes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DbContextOptions&lt;/li&gt;
  &lt;li&gt;EntityServicesBuilder&lt;/li&gt;
  &lt;li&gt;Storage.Database&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started-sample-project&quot;&gt;Getting Started: Sample Project&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/natemcmaster/entityframework-provider-starter&quot;&gt;this repository&lt;/a&gt;
to get a starter project for writing a new EF provider.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;h2 id=&quot;a-nameabstractclassesa-abstract-classes&quot;&gt;&lt;a name=&quot;abstractclasses&quot;&gt;&lt;/a&gt; Abstract Classes&lt;/h2&gt;

&lt;h3 id=&quot;infrastructuredbcontextoptionsextension&quot;&gt;Infrastructure.DbContextOptionsExtension&lt;/h3&gt;
&lt;p&gt;This class configures the dependency injection settings used in an instance of DbContext.
It is used during DbContext initialization to configure the DbContextOptions.&lt;/p&gt;

&lt;p&gt;Methods required:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/abu6gCh.png&quot; alt=&quot;DbContextOptionExtension&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;storagedatastore&quot;&gt;Storage.Datastore&lt;/h3&gt;
&lt;p&gt;This class is the hub of activity for a provider.
A data store must implement these methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaveChangesAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IReadOnlyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QueryModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                              &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SaveChanges&lt;/strong&gt; receives a list of entities which must be persisted to the data store.
Upon successful completion, return the number of entities successfully saved.
If an entity cannot be saved, this method should throw an exception containing
the reason why the action failed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/chhMeSe.png&quot; alt=&quot;Save changes workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt; receives a &lt;a href=&quot;#relinq&quot;&gt;QueryModel&lt;/a&gt; containing a query to execute against the data store.
This method should return an IEnumerable from the data store of all entites matching
the query model. QueryModel is a simplified, but equivalent expression tree that represents
the original LINQ query requested by user code on DbSet. (Thanks &lt;a href=&quot;#relinq&quot;&gt;relinq&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FvUcYFZ.png&quot; alt=&quot;Query&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;storagedatastoreconnection&quot;&gt;Storage.DataStoreConnection&lt;/h3&gt;
&lt;p&gt;This class manages connection settings and sessions.&lt;/p&gt;

&lt;p&gt;Although an EF provider requires an implementation, the details of how the class
operates is &lt;em&gt;entirely up to the provider&lt;/em&gt; i.e. time to freestyle. &lt;img class=&quot;emoji&quot; title=&quot;:snowboarder:&quot; alt=&quot;:snowboarder:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f3c2.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; &lt;/p&gt;

&lt;p&gt;For example, SQL Server uses this class to open TCP/IP connections,
but SQLite uses this class to create connections to the local filesystem.&lt;/p&gt;

&lt;h3 id=&quot;storagedatastorecreator&quot;&gt;Storage.DataStoreCreator&lt;/h3&gt;
&lt;p&gt;An implementation of requires implementation of the following methods.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;EnsureCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureCreatedAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;EnsureDeleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureDeletedAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;EnsureCreated&lt;/strong&gt; ensures that the database/tables/containers needed to store
the model on the server exists and are write-accessible.
&lt;strong&gt;EnsureDeleted&lt;/strong&gt; ensures the database/tables/containers are deleted.&lt;/p&gt;

&lt;p&gt;Both methods &lt;em&gt;return true&lt;/em&gt; when the method call changed something on the server —
e.g. created a new database, deleted a table — and &lt;em&gt;return false&lt;/em&gt; when
the model has already been created/deleted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Taun659.png&quot; alt=&quot;datastorecreator&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-namedatastoresourceastoragedatastoresource&quot;&gt;&lt;a name=&quot;datastoresource&quot;&gt;&lt;/a&gt;Storage.DatastoreSource&lt;/h3&gt;
&lt;p&gt;This class configures Entity Framework to use provider-specific implementations
of theses classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage.DataStore&lt;/li&gt;
  &lt;li&gt;Infrastructure.DbContextOptionsExtension&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreCreator&lt;/li&gt;
  &lt;li&gt;Storage.DataStoreConnection&lt;/li&gt;
  &lt;li&gt;Identity.ValueGeneratorCache &lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Storage.Database &lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;emoji&quot; title=&quot;:small_blue_diamond:&quot; alt=&quot;:small_blue_diamond:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f539.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; These classes are not abstract. A default implementation has been provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nMQM7Dl.png&quot; alt=&quot;Datastoresource&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because this is fairly straightforward class, we have provided an abstract implementation that makes it 
easier to use dependency injection.&lt;/p&gt;

&lt;h4 id=&quot;datastoresourcelttdatastore-tdbcontextoptionsextension-tcreator-tconnection-tvaluegeneratorcache-tdatabasegt&quot;&gt;DatastoreSource&amp;lt;TDataStore, TDbContextOptionsExtension, TCreator, TConnection, TValueGeneratorCache, TDatabase&amp;gt;&lt;/h4&gt;
&lt;p&gt;This generic class requests an implementation of the types classes from ServiceCollection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rNucpFG.png&quot; alt=&quot;Datastoresource generic&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-nameoptionaloverridea-optional-overrides&quot;&gt;&lt;a name=&quot;optionaloverride&quot;&gt;&lt;/a&gt; Optional Overrides&lt;/h2&gt;
&lt;p&gt;These classes do not &lt;em&gt;need&lt;/em&gt; to be implemented, but they are a way to extend provider features.&lt;/p&gt;

&lt;h3 id=&quot;infrastructuredatabase&quot;&gt;Infrastructure.Database&lt;/h3&gt;
&lt;p&gt;This class provides access to APIs custom to the database of the provider.
This class is best used as a proxy to DatastoreCreator which should contain the
logic for manipulating the structure of the data store.&lt;/p&gt;

&lt;p&gt;Example: SQLite uses this to provide APIs for creating/deleting a database file.
In Azure Table Storage, it provides APIs for creating/deleting tables on the server.&lt;/p&gt;

&lt;h3 id=&quot;infrastructurevaluegeneratorcache&quot;&gt;Infrastructure.ValueGeneratorCache&lt;/h3&gt;
&lt;p&gt;This class is used to control value generators.
Value generators are used by EF7 to populate fields, such as auto-incremented IDs, that are generated on the server or client.&lt;/p&gt;

&lt;h2 id=&quot;a-nameextensionmethodsarecommended-extension-methods&quot;&gt;&lt;a name=&quot;extensionmethods&quot;&gt;&lt;/a&gt;Recommended Extension Methods&lt;/h2&gt;
&lt;p&gt;These classes exist in EF’s Core, but users may not know how to directly interact
with them to configure their application.
By creating custom extension methods, IntelliSense in Visual Studio will show users
custom methods to configure the provider.
IntelliSense works best the extension methods are defined in the namespace of the class they extend.&lt;/p&gt;

&lt;h3 id=&quot;dbcontextoptions&quot;&gt;DbContextOptions&lt;/h3&gt;
&lt;p&gt;Expose access to your provider within the &lt;em&gt;OnConfiguring&lt;/em&gt; method of DbContext. 
Your extension method should add your provider-specific implementation of 
DbContextOptionsExtension to an instance of DbContextOptions.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoji&quot; title=&quot;:hammer:&quot; alt=&quot;:hammer:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f528.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; Power user note: To add a DbContextOptionsExtension to DbContextOptions,
you must first cast DbContextOptions to IDbContextOptionsExtensions, and then use
**IDbContextOptionsExtensions.AddOrUpdateExtension&lt;t&gt;()**.
We require this to keep IntelliSense clean for users, but still expose
APIs for EF provider developers.&lt;/t&gt;&lt;/p&gt;

&lt;p&gt;Example: This will help users configure a context that connects to Azure Table Storage.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Data.Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtsDbContextExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContextOptions&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseAzureTableStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContextOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDbContextOptionsExtensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddOrUpdateExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsOptionsExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;entityservicesbuilder&quot;&gt;EntityServicesBuilder&lt;/h3&gt;
&lt;p&gt;Expose access to dependency injection configuration. This extension should configure
DI to use provider-specific implementations.&lt;/p&gt;

&lt;p&gt;Example: Configure DI to use Azure Table Storage’s implementations&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Framework.DependencyInjection&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntityServicesBuilderExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddAzureTableStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityServicesBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceCollection&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataStoreSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtsDataStoreSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsQueryFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TableEntityAdapterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsValueReaderFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsDataStoreCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtsValueGeneratorCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;storagedatabase&quot;&gt;Storage.Database&lt;/h3&gt;
&lt;p&gt;Expose the provider-specific database calls with an extension method that
safely casts Storage.Database to the provider implementation.&lt;/p&gt;

&lt;p&gt;Example: This will light-up the APIs unique to SQL. A user will see this extension method
listed in IntelliSense when accessing DbContext.Database&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Data.Entity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RelationalDatabaseExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelationalDatabase&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AsRelational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelationalDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;RelationalDatabase not in use&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relationalDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;third-party-libraries&quot;&gt;Third-Party Libraries&lt;/h1&gt;

&lt;h3 id=&quot;a-namerelinqarelinq&quot;&gt;&lt;a name=&quot;relinq&quot;&gt;&lt;/a&gt;Relinq&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://relinq.codeplex.com&quot;&gt;relinq&lt;/a&gt; is a third party library used by Entity Framework to simplify interaction
with LINQ queries. All LINQ queries against DbSet run through a set of expression
tree visitors that have been simplified by relinq. A provider may read and/or
change the expression tree it receives in &lt;strong&gt;Storage.Datastore.Query()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris.eldredge.io/blog/2012/03/29/Getting-Started-With-Relinq/&quot;&gt;Getting Started with Re-linq&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.re-motion.org/blogs/mix/category/re-linq&quot;&gt;Re-linq blog posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Jul 2014 17:30:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/07/19/writing-an-ef7-provider/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/07/19/writing-an-ef7-provider/</guid>
        
        
      </item>
    
      <item>
        <title>Graphs, Trees, and Leonardo da Vinci</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.natemcmaster.com/projects/historyexplorer/&quot;&gt;History Explorer&lt;/a&gt; allows users to explore the relationship between historical people, places, and ideas. The content itself is almost completely verbatim Wikipedia. The more important part is the graphical presentation. &lt;/p&gt;

&lt;p&gt;Ideas, people, and places share a connection. Karinthy theorized that everyone can be connected to everyone in a chain of six links or fewer, or six degrees of separation. Unique ideas, wars, political leaders, books, painting, and music share a similar connection. History explorer attempts to capture and present some of those connections (but only a very minor subset).&lt;/p&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Most college seniors barely survive their last and final history class. I got lucky. My history class allowed me to do something new and innovative. The professor chose to theme his class around &lt;em&gt;creativity&lt;/em&gt;. For the final project, worth a third of our grade, we had to present a “creative work that involves historical content.” This project is the fruit of those open-ended guidelines.&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;
&lt;p&gt;This static website relys almost entirely on client-side JavaScript. &lt;a href=&quot;https://github.com/natemcmaster/historyexplorer/tree/build&quot;&gt;The application&lt;/a&gt; relies on &lt;a href=&quot;https://angularjs.org&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://d3js.org&quot;&gt;D3.js&lt;/a&gt; to organize and present the content. The website is served from GitHub pages, and includes a rather large (900 kb) JSON file to provide the data for the graph. I crafted the JSON using some &lt;a href=&quot;https://github.com/natemcmaster/historyexplorer/tree/master/builder&quot;&gt;Python scripts&lt;/a&gt; and a list of historical terms from the course. The most rigorous part of the project involved matching connections between key terms and choosing images. This took almost as much time as the invention of a good heuristic for arranging the nodes in the graph.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jun 2014 12:00:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2014/06/02/history-explorer/</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2014/06/02/history-explorer/</guid>
        
        
      </item>
    
      <item>
        <title>Don&#39;t Be A Pirate</title>
        <description>&lt;p&gt;The wild frontier of the Internet allows new forms of piracy. Hacking, pornography, &lt;a href=&quot;http://en.wikipedia.org/wiki/Silk_Road_(marketplace)&quot;&gt;black markets&lt;/a&gt;, and digital theft abound, and the Internet provides anonymity. Although you &lt;em&gt;can&lt;/em&gt; do these, you really not. Contrary to what Captain Barbossa implied, everyone should stick to the “Code.” The code of right and wrong, when ignored, leads only to more misery. I am not talking about any &lt;a href=&quot;http://www.acm.org/about/code-of-ethics&quot;&gt;specific&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Pirate_code&quot;&gt;code&lt;/a&gt;, but rather, the divine code inside all humans. Follow your internal moral compass. Seek the good, noble, inspiring, and honorable. If you feel a need to hide your actions, they are probably wrong. Don’t be a pirate: be good.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Dec 2013 16:21:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/12/dont-be-pirate.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/12/dont-be-pirate.html</guid>
        
        
        <category>opinion</category>
        
        <category>cs404</category>
        
      </item>
    
      <item>
        <title>A Rebuttal For Mark Bauerline</title>
        <description>&lt;p&gt;I have never read a book more infuriating than &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/The-Dumbest-Generation-Stupefies-Jeopardizes/dp/1585427128&quot;&gt;The Dumbest Generation&lt;/a&gt;&lt;/em&gt;. Its author, Mark Bauerline, predicts a grim future based on statistics about my generation. His facts may be accurate, but his interpretation is wrong. No, the sky is not falling. Here are a few reasons why. &lt;/p&gt;

&lt;p&gt;Change does not jeopardize the future. The technology of communication has changed many times. Neither the printing press, typewriter, nor telegram crashed civilization. Rather, they sped the Enlightenment, Reformation, and Scientific Revolution. Likewise, the Internet is an opportunity, not a curse. It lowers the cost of widespread publication. Expensive books limited publication of ideas to highly literate authors. Blogging and social media expand publishing power to all.  &lt;/p&gt;

&lt;p&gt;Civic activity is not the only variable in producing quality government. Cultural pressure, wealthy lobbyists, foreign affairs, and the health of the economy influence government, too. Today’s youth may not vote, campaign, or lobby as much as the youth of the 1950s, but this is not necessarily a decline: it is change. Decades ago, the public square was the place to share and spread ideas. Today, the public square is the Internet. The political tools of decades past must adapt to advance of digital communication. &lt;/p&gt;

&lt;p&gt;Finally, the intellectual future of the United States is brighter than ever. My so-called “dumbest” generation is exposed to an ever wider and diverse stream of ideas, but this does not dull or stupefy. Exposure sharpens our power to filter, discern, interpret, and analyze. My generation cannot be sheltered from learning about lifestyles, opinions, and cultures different from our parents’. We learn younger and better how to judge credibility, ignore noise, and make decisions. The intellectual future rests in our hands, and we come as hungry to know and think as any generation past.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Nov 2013 06:36:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/11/chicken-little.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/11/chicken-little.html</guid>
        
        
        <category>book post</category>
        
        <category>cs404</category>
        
      </item>
    
      <item>
        <title>An Engineer-ette</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.cirtl.net/node/5424&quot;&gt;Many women feel unwelcomed in computer science&lt;/a&gt;. It’s a shame they feel so because computer software companies need more women programmers. Between all programmers I have met working for BYU, Microsoft, and Ancestry.com, I have only known one woman software engineer. She worked as a testing engineer, and wrote code as well as any. Her most important contribution was her elevating and tempering effect on the men. When she was absent, conversation revolved around Xbox victories, bar-hopping feats, and food. When present, the men adjusted to a nobler vocabulary. Although she bragged about beer festivals too, she favored discussion about social dynamics, management styles, and civics. I am glad she did not let the gender ratio dissuade her from working there. I learned as much from her as I did from anyone else.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Nov 2013 02:05:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/11/an-engineer-ette.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/11/an-engineer-ette.html</guid>
        
        
        <category>cs404</category>
        
      </item>
    
      <item>
        <title>A Lunch-break Soccer Game</title>
        <description>&lt;p&gt;Some problems cannot be solved by computers. For example, organizing a lunch-break soccer game among co-workers is not solvable via computers. It is best solved by face-to-face invitations. In the last 6 months at my job, I have seen 3 attempts to organize this group. One person setup a small website to send reminders. Another started a spammy, email message list. A third tried text messaging. The problems of these digital format are easy to identify. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Recipients ignore the messages. 
2. Messages are often duplicated, distorted, or incorrect. 
3. Responses give little indication of who will actually show up. I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end, these attempts fall flat and we resort to the old-fashion method: verbal communication.&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Nov 2013 01:30:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/11/a-lunch-break-soccer-game.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/11/a-lunch-break-soccer-game.html</guid>
        
        
        <category>cs404</category>
        
      </item>
    
      <item>
        <title>Why Every Computer Science Major Should Work During School</title>
        <description>&lt;p&gt;Every university student studying computer science or engineering should seek part-time employment while still in school. Even those pursuing positions in academia should try it. I have held 4 programming positions while in school. Work teaches what school cannot. School has taught me some theory and skill, but work has taught me the importance of communication, marketing, and user testing. School has taught me how to write C++, Java, and others. Work has taught me that valuable software solves a problem. School has taught me how to get a grade. Work has taught me how to work on a team. School has given me a toolset of knowledge and information. Without work, however, I would not know how to use those tools to create something &lt;em&gt;real people&lt;/em&gt; will use.&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Nov 2013 15:28:00 -0700</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/11/why-every-computer-science-major-should.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/11/why-every-computer-science-major-should.html</guid>
        
        
        <category>opinion</category>
        
        <category>cs404</category>
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Reading Nonfiction Is Inefficient</title>
        <description>&lt;p&gt;The Internet is a satisfactory substitute for reading nonfiction cover-to-cover. The reading habits of the younger generation reflect this attitude. Studies&lt;a href=&quot;http://www.boston.com/news/nation/articles/2007/11/19/young_people_reading_a_lot_less/?page=full&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;http://www.npr.org/templates/story/story.php?storyId=16739654&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;http://books.google.com/books?id=lpq3ryL1c6sC&amp;amp;dq=the+dumbest+generation&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; show those 25 and younger read books significantly less than previous generations. For anyone in this group, such as me, this seems obvious. Read books for days, even weeks, and you might find the information you seek. Google it for minutes, maybe hours, and you will find the same thing. Unless you are a Ph.D. student, the overabundant information in books is extraneous, especially in technical and historical books. So why read nonfiction cover-to-cover? The &lt;a href=&quot;http://www.greatschools.org/reading/7071-non-fiction-why-its-important.gs&quot;&gt;reasons&lt;/a&gt; others give are not compelling.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Oct 2013 15:11:00 -0600</pubDate>
        <link>http://www.natemcmaster.com/blog/2013/10/reading-nonfiction-is-inefficient.html</link>
        <guid isPermaLink="true">http://www.natemcmaster.com/blog/2013/10/reading-nonfiction-is-inefficient.html</guid>
        
        
        <category>opinion</category>
        
        <category>cs404</category>
        
      </item>
    
  </channel>
</rss>
